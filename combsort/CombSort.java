package combsort;
import java.util.Arrays;

public class CombSort {

    private static int ctr = 0;

    public static void main(String[] args) {
        String input = "16 75 3 76 19 29 48 37 97 2 91 98 46 56 91 53 7 87 72 22 67 14 16 76 45 80 69 3 82 18 39 4 100 12 91 92 41 51 49 3 94 50 82 50 88 12 68 23 36 25 27 45 89 3 77 22 62 2 5 79 37 18 11 26 5 11 74 43 12 14 11 54 51 40 91 94 46 94 91 43 89 50 67 46 13 10 73 72 31 58 83 41 19 3 95 52 9 70 68 74 55 39 27 14 57 14 3 85 81 50 26 64 33 2 50 93 92 9 46 37 65 41 57 40 88 9 94 16 30 14 70 97 88 100 89 83 5 12 16 54 30 93 56 8 33 29 74 30 86 48 97 91 71 3 41 14 19 74 17 99 87 100 84 30 57 50 5 95 1 61 70 93 67 79 73 66 69 95 73 47 90 51 88 38 62 48 12 4 69 17 4 97 48 6 24 31 21 8 41 100 53 56 99 5 67 89 65 56 63 94 69 15 28 2 18 21 4 84 78 30 96 56 10 90 25 57 15 31 35 83 53 63 4 9 74 36 16 67 28 63 47 24 14 41 27 36 24 53 98 1 59 58 64 19 54 7 52 16 29 68 39 17 28 12 80 82 39 26 86 26 22 64 52 62 70 1 69 35 79 93 97 75 69 77 3 13 39 89 92 53 62 5 7 43 96 33 5 46 45 11 10 83 55 97 10 40 81 78 87 2 38 92 57 8 7 30 26 34 80 12 45 16 59 15 76 2 20 21 39 9 77 55 16 26 25 33 79 94 87 40 1 59 68 62 50 40 56 56 46 63 64 72 58 28 66 52 21 28 88 35 94 25 84 47 22 78 4 39 34 93 81 89 95 34 32 15 58 43 90 13 73 50 78 17 76 40 2 58 44 29 3 12 63 90 50 71 36 63 17 60 93 58 49 79 27 43 45 52 79 73 99 15 92 43 45 93 23 51 66 11 4 60 17 63 73 36 16 44 25 15 32 37 47 2 22 7 93 96 89 26 18 59 60 98 62 52 20 48 40 21 50 54 59 41 20 17 92 100 66 58 25 2 49 70 14 5 61 100 55 26 46 1 16 89 18 18 11 64 17 55 74 76 30 88 36 65 60 99 89 24 96 30 33 83 20 5 25 79 6 86 11 64 29 20 71 23 41 86 59 21 50 46 22 93 75 50 81 51 41 9 64 90 78 57 43 80 44 42 66 9 84 29 14 22 25 9 64 78 83 92 18 60 88 10 68 15 64 96 94 25 17 99 95 2 53 64 68 70 6 93 50 14 82 62 34 17 65 53 35 39 79 5 5 63 42 22 51 73 23 85 60 36 26 91 2 10 2 11 81 92 26 78 94 32 38 75 6 80 3 41 51 4 91 66 94 91 13 77 26 51 39 25 62 55 12 91 43 39 91 26 67 93 11 8 94 90 61 67 75 4 78 57 31 58 75 31 56 28 33 6 75 56 5 74 52 74 66 90 86 36 61 23 10 26 87 67 79 50 32 9 82 17 70 91 20 34 82 12 91 48 3 72 39 88 34 11 98 50 62 83 85 65 51 18 29 78 81 39 40 99 34 16 52 7 22 61 49 76 42 62 52 22 78 12 2 34 95 27 73 15 15 74 10 66 74 91 89 99 65 90 28 28 17 30 40 10 3 21 27 81 15 100 16 87 24 42 74 78 24 22 58 5 46 56 83 5 5 34 38 93 72 34 99 91 97 39 93 96 38 11 4 8 63 1 61 71 7 96 90 3 49 95 29 17 77 68 13 77 10 8 32 11 44 47 65 3 28 15 44 73 26 4 96 48 58 24 42 60 51 87 2 23 52 97 44 57 35 17 46 35 50 75 63 69 66 40 21 4 36 65 99 80 97 5 81 99 53 60 91 89 69 51 13 58 74 83 17 46 95 86 3 85 51 11 27 83 71 43 45 59 38 87 27 26 24 81 93 89 31 74 6 93 41 64 42 17 47 36 79 14 85 36 95 74 51 49 56 32 80 17 43 60 68 9 39 30 46 92 20 71 18 80 97 15 51 15 40 3 19 42 3 17 59 47 27 70 70 72 9 97 80 28 46 42 97 28 23 3 80 90 46 79 81 91 13 34 64 44 88 69 43 75 24 17 22 46 70 93 80 15 72 70 46 29 77 33 57 53 76 39 46 28 26 33 84 36 76 52 65 64 50 60 79 77 84 39 60 56 9 52 67 59 43 34 27 88 70 21 28 47 42 13 57 57 2 69 51 60 87 28 94 27 61 44 7 88 58 89 77 96"; ctr++;
        int[] array = Arrays.stream(input.split(" ")).mapToInt(Integer::parseInt).toArray(); ctr++;
        combSort(array); ctr++;
        System.out.println("Sorted array: \n" + Arrays.toString(array) + "\n\nTime Complexity Count: " + ctr); ctr++;
        System.out.println(); ctr++;
    }
    public static void combSort(int[] array) {
        int n = array.length, gap = n; ctr++;
        boolean swapped = true; ctr++;
        ctr++;
        while (gap > 1 || swapped) { ctr++; ctr++;
            gap = getNextGap(gap); ctr++;
            swapped = false; ctr++;
            ctr++;
            for (int i = 0; i < n - gap; i++) { ctr++; ctr++;
                int j = i + gap; ctr++;
                if (array[i] > array[j]) { ctr++; ctr++;
                    // Swap array[i] and array[j]
                    int temp = array[i]; ctr++;
                    array[i] = array[j]; ctr++;
                    array[j] = temp; ctr++;
                    swapped = true; ctr++;
                }
            }
        }
    }

    private static int getNextGap(int gap) {
        // Shrink gap by a factor of 1.3
        return Math.max((gap * 10) / 13, 1);
    }
}